/* soapH.h
   Generated by gSOAP 2.8.84 for MesWebservice.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__BarCodeTableResponse_BarCodeTableResult_DEFINED
#define SOAP_TYPE__ns1__BarCodeTableResponse_BarCodeTableResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BarCodeTableResponse_BarCodeTableResult(struct soap*, const char*, int, const _ns1__BarCodeTableResponse_BarCodeTableResult *, const char*);
SOAP_FMAC3 _ns1__BarCodeTableResponse_BarCodeTableResult * SOAP_FMAC4 soap_in__ns1__BarCodeTableResponse_BarCodeTableResult(struct soap*, const char*, _ns1__BarCodeTableResponse_BarCodeTableResult *, const char*);
SOAP_FMAC1 _ns1__BarCodeTableResponse_BarCodeTableResult * SOAP_FMAC2 soap_instantiate__ns1__BarCodeTableResponse_BarCodeTableResult(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BarCodeTableResponse_BarCodeTableResult * soap_new__ns1__BarCodeTableResponse_BarCodeTableResult(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BarCodeTableResponse_BarCodeTableResult(soap, n, NULL, NULL, NULL);
}

inline _ns1__BarCodeTableResponse_BarCodeTableResult * soap_new_req__ns1__BarCodeTableResponse_BarCodeTableResult(
	struct soap *soap)
{
	_ns1__BarCodeTableResponse_BarCodeTableResult *_p = ::soap_new__ns1__BarCodeTableResponse_BarCodeTableResult(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__BarCodeTableResponse_BarCodeTableResult * soap_new_set__ns1__BarCodeTableResponse_BarCodeTableResult(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__any_)
{
	_ns1__BarCodeTableResponse_BarCodeTableResult *_p = ::soap_new__ns1__BarCodeTableResponse_BarCodeTableResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BarCodeTableResponse_BarCodeTableResult::__any = __any;
		_p->_ns1__BarCodeTableResponse_BarCodeTableResult::__any_ = __any_;
	}
	return _p;
}

inline int soap_write__ns1__BarCodeTableResponse_BarCodeTableResult(struct soap *soap, _ns1__BarCodeTableResponse_BarCodeTableResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BarCodeTableResponse-BarCodeTableResult", p->soap_type() == SOAP_TYPE__ns1__BarCodeTableResponse_BarCodeTableResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BarCodeTableResponse_BarCodeTableResult(struct soap *soap, const char *URL, _ns1__BarCodeTableResponse_BarCodeTableResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BarCodeTableResponse-BarCodeTableResult", p->soap_type() == SOAP_TYPE__ns1__BarCodeTableResponse_BarCodeTableResult ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__BarCodeTableResponse_BarCodeTableResult(struct soap *soap, const char *URL, _ns1__BarCodeTableResponse_BarCodeTableResult const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BarCodeTableResponse-BarCodeTableResult", p->soap_type() == SOAP_TYPE__ns1__BarCodeTableResponse_BarCodeTableResult ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BarCodeTableResponse_BarCodeTableResult(struct soap *soap, const char *URL, _ns1__BarCodeTableResponse_BarCodeTableResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BarCodeTableResponse-BarCodeTableResult", p->soap_type() == SOAP_TYPE__ns1__BarCodeTableResponse_BarCodeTableResult ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BarCodeTableResponse_BarCodeTableResult * SOAP_FMAC4 soap_get__ns1__BarCodeTableResponse_BarCodeTableResult(struct soap*, _ns1__BarCodeTableResponse_BarCodeTableResult *, const char*, const char*);

inline int soap_read__ns1__BarCodeTableResponse_BarCodeTableResult(struct soap *soap, _ns1__BarCodeTableResponse_BarCodeTableResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__BarCodeTableResponse_BarCodeTableResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BarCodeTableResponse_BarCodeTableResult(struct soap *soap, const char *URL, _ns1__BarCodeTableResponse_BarCodeTableResult *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__BarCodeTableResponse_BarCodeTableResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__BarCodeTableResponse_BarCodeTableResult(struct soap *soap, _ns1__BarCodeTableResponse_BarCodeTableResult *p)
{
	if (::soap_read__ns1__BarCodeTableResponse_BarCodeTableResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__DataTable_DEFINED
#define SOAP_TYPE__ns1__DataTable_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DataTable(struct soap*, const char*, int, const _ns1__DataTable *, const char*);
SOAP_FMAC3 _ns1__DataTable * SOAP_FMAC4 soap_in__ns1__DataTable(struct soap*, const char*, _ns1__DataTable *, const char*);
SOAP_FMAC1 _ns1__DataTable * SOAP_FMAC2 soap_instantiate__ns1__DataTable(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DataTable * soap_new__ns1__DataTable(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DataTable(soap, n, NULL, NULL, NULL);
}

inline _ns1__DataTable * soap_new_req__ns1__DataTable(
	struct soap *soap)
{
	_ns1__DataTable *_p = ::soap_new__ns1__DataTable(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__DataTable * soap_new_set__ns1__DataTable(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__any_)
{
	_ns1__DataTable *_p = ::soap_new__ns1__DataTable(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DataTable::__any = __any;
		_p->_ns1__DataTable::__any_ = __any_;
	}
	return _p;
}

inline int soap_write__ns1__DataTable(struct soap *soap, _ns1__DataTable const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DataTable", p->soap_type() == SOAP_TYPE__ns1__DataTable ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DataTable(struct soap *soap, const char *URL, _ns1__DataTable const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DataTable", p->soap_type() == SOAP_TYPE__ns1__DataTable ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__DataTable(struct soap *soap, const char *URL, _ns1__DataTable const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DataTable", p->soap_type() == SOAP_TYPE__ns1__DataTable ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DataTable(struct soap *soap, const char *URL, _ns1__DataTable const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DataTable", p->soap_type() == SOAP_TYPE__ns1__DataTable ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DataTable * SOAP_FMAC4 soap_get__ns1__DataTable(struct soap*, _ns1__DataTable *, const char*, const char*);

inline int soap_read__ns1__DataTable(struct soap *soap, _ns1__DataTable *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__DataTable(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DataTable(struct soap *soap, const char *URL, _ns1__DataTable *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__DataTable(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__DataTable(struct soap *soap, _ns1__DataTable *p)
{
	if (::soap_read__ns1__DataTable(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__BarCodeTableResponse_DEFINED
#define SOAP_TYPE__ns1__BarCodeTableResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BarCodeTableResponse(struct soap*, const char*, int, const _ns1__BarCodeTableResponse *, const char*);
SOAP_FMAC3 _ns1__BarCodeTableResponse * SOAP_FMAC4 soap_in__ns1__BarCodeTableResponse(struct soap*, const char*, _ns1__BarCodeTableResponse *, const char*);
SOAP_FMAC1 _ns1__BarCodeTableResponse * SOAP_FMAC2 soap_instantiate__ns1__BarCodeTableResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BarCodeTableResponse * soap_new__ns1__BarCodeTableResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BarCodeTableResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__BarCodeTableResponse * soap_new_req__ns1__BarCodeTableResponse(
	struct soap *soap)
{
	_ns1__BarCodeTableResponse *_p = ::soap_new__ns1__BarCodeTableResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__BarCodeTableResponse * soap_new_set__ns1__BarCodeTableResponse(
	struct soap *soap,
	_ns1__BarCodeTableResponse_BarCodeTableResult *BarCodeTableResult)
{
	_ns1__BarCodeTableResponse *_p = ::soap_new__ns1__BarCodeTableResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BarCodeTableResponse::BarCodeTableResult = BarCodeTableResult;
	}
	return _p;
}

inline int soap_write__ns1__BarCodeTableResponse(struct soap *soap, _ns1__BarCodeTableResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BarCodeTableResponse", p->soap_type() == SOAP_TYPE__ns1__BarCodeTableResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BarCodeTableResponse(struct soap *soap, const char *URL, _ns1__BarCodeTableResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BarCodeTableResponse", p->soap_type() == SOAP_TYPE__ns1__BarCodeTableResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__BarCodeTableResponse(struct soap *soap, const char *URL, _ns1__BarCodeTableResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BarCodeTableResponse", p->soap_type() == SOAP_TYPE__ns1__BarCodeTableResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BarCodeTableResponse(struct soap *soap, const char *URL, _ns1__BarCodeTableResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BarCodeTableResponse", p->soap_type() == SOAP_TYPE__ns1__BarCodeTableResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BarCodeTableResponse * SOAP_FMAC4 soap_get__ns1__BarCodeTableResponse(struct soap*, _ns1__BarCodeTableResponse *, const char*, const char*);

inline int soap_read__ns1__BarCodeTableResponse(struct soap *soap, _ns1__BarCodeTableResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__BarCodeTableResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BarCodeTableResponse(struct soap *soap, const char *URL, _ns1__BarCodeTableResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__BarCodeTableResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__BarCodeTableResponse(struct soap *soap, _ns1__BarCodeTableResponse *p)
{
	if (::soap_read__ns1__BarCodeTableResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__BarCodeTable_DEFINED
#define SOAP_TYPE__ns1__BarCodeTable_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BarCodeTable(struct soap*, const char*, int, const _ns1__BarCodeTable *, const char*);
SOAP_FMAC3 _ns1__BarCodeTable * SOAP_FMAC4 soap_in__ns1__BarCodeTable(struct soap*, const char*, _ns1__BarCodeTable *, const char*);
SOAP_FMAC1 _ns1__BarCodeTable * SOAP_FMAC2 soap_instantiate__ns1__BarCodeTable(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BarCodeTable * soap_new__ns1__BarCodeTable(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BarCodeTable(soap, n, NULL, NULL, NULL);
}

inline _ns1__BarCodeTable * soap_new_req__ns1__BarCodeTable(
	struct soap *soap)
{
	_ns1__BarCodeTable *_p = ::soap_new__ns1__BarCodeTable(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__BarCodeTable * soap_new_set__ns1__BarCodeTable(
	struct soap *soap,
	std::string *barcode)
{
	_ns1__BarCodeTable *_p = ::soap_new__ns1__BarCodeTable(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BarCodeTable::barcode = barcode;
	}
	return _p;
}

inline int soap_write__ns1__BarCodeTable(struct soap *soap, _ns1__BarCodeTable const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BarCodeTable", p->soap_type() == SOAP_TYPE__ns1__BarCodeTable ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BarCodeTable(struct soap *soap, const char *URL, _ns1__BarCodeTable const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BarCodeTable", p->soap_type() == SOAP_TYPE__ns1__BarCodeTable ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__BarCodeTable(struct soap *soap, const char *URL, _ns1__BarCodeTable const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BarCodeTable", p->soap_type() == SOAP_TYPE__ns1__BarCodeTable ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BarCodeTable(struct soap *soap, const char *URL, _ns1__BarCodeTable const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BarCodeTable", p->soap_type() == SOAP_TYPE__ns1__BarCodeTable ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BarCodeTable * SOAP_FMAC4 soap_get__ns1__BarCodeTable(struct soap*, _ns1__BarCodeTable *, const char*, const char*);

inline int soap_read__ns1__BarCodeTable(struct soap *soap, _ns1__BarCodeTable *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__BarCodeTable(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BarCodeTable(struct soap *soap, const char *URL, _ns1__BarCodeTable *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__BarCodeTable(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__BarCodeTable(struct soap *soap, _ns1__BarCodeTable *p)
{
	if (::soap_read__ns1__BarCodeTable(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__BarCodeSendResponse_DEFINED
#define SOAP_TYPE__ns1__BarCodeSendResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BarCodeSendResponse(struct soap*, const char*, int, const _ns1__BarCodeSendResponse *, const char*);
SOAP_FMAC3 _ns1__BarCodeSendResponse * SOAP_FMAC4 soap_in__ns1__BarCodeSendResponse(struct soap*, const char*, _ns1__BarCodeSendResponse *, const char*);
SOAP_FMAC1 _ns1__BarCodeSendResponse * SOAP_FMAC2 soap_instantiate__ns1__BarCodeSendResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BarCodeSendResponse * soap_new__ns1__BarCodeSendResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BarCodeSendResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__BarCodeSendResponse * soap_new_req__ns1__BarCodeSendResponse(
	struct soap *soap)
{
	_ns1__BarCodeSendResponse *_p = ::soap_new__ns1__BarCodeSendResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__BarCodeSendResponse * soap_new_set__ns1__BarCodeSendResponse(
	struct soap *soap,
	std::string *BarCodeSendResult)
{
	_ns1__BarCodeSendResponse *_p = ::soap_new__ns1__BarCodeSendResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BarCodeSendResponse::BarCodeSendResult = BarCodeSendResult;
	}
	return _p;
}

inline int soap_write__ns1__BarCodeSendResponse(struct soap *soap, _ns1__BarCodeSendResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BarCodeSendResponse", p->soap_type() == SOAP_TYPE__ns1__BarCodeSendResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BarCodeSendResponse(struct soap *soap, const char *URL, _ns1__BarCodeSendResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BarCodeSendResponse", p->soap_type() == SOAP_TYPE__ns1__BarCodeSendResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__BarCodeSendResponse(struct soap *soap, const char *URL, _ns1__BarCodeSendResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BarCodeSendResponse", p->soap_type() == SOAP_TYPE__ns1__BarCodeSendResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BarCodeSendResponse(struct soap *soap, const char *URL, _ns1__BarCodeSendResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BarCodeSendResponse", p->soap_type() == SOAP_TYPE__ns1__BarCodeSendResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BarCodeSendResponse * SOAP_FMAC4 soap_get__ns1__BarCodeSendResponse(struct soap*, _ns1__BarCodeSendResponse *, const char*, const char*);

inline int soap_read__ns1__BarCodeSendResponse(struct soap *soap, _ns1__BarCodeSendResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__BarCodeSendResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BarCodeSendResponse(struct soap *soap, const char *URL, _ns1__BarCodeSendResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__BarCodeSendResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__BarCodeSendResponse(struct soap *soap, _ns1__BarCodeSendResponse *p)
{
	if (::soap_read__ns1__BarCodeSendResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__BarCodeSend_DEFINED
#define SOAP_TYPE__ns1__BarCodeSend_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BarCodeSend(struct soap*, const char*, int, const _ns1__BarCodeSend *, const char*);
SOAP_FMAC3 _ns1__BarCodeSend * SOAP_FMAC4 soap_in__ns1__BarCodeSend(struct soap*, const char*, _ns1__BarCodeSend *, const char*);
SOAP_FMAC1 _ns1__BarCodeSend * SOAP_FMAC2 soap_instantiate__ns1__BarCodeSend(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BarCodeSend * soap_new__ns1__BarCodeSend(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BarCodeSend(soap, n, NULL, NULL, NULL);
}

inline _ns1__BarCodeSend * soap_new_req__ns1__BarCodeSend(
	struct soap *soap)
{
	_ns1__BarCodeSend *_p = ::soap_new__ns1__BarCodeSend(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__BarCodeSend * soap_new_set__ns1__BarCodeSend(
	struct soap *soap,
	std::string *barcode)
{
	_ns1__BarCodeSend *_p = ::soap_new__ns1__BarCodeSend(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BarCodeSend::barcode = barcode;
	}
	return _p;
}

inline int soap_write__ns1__BarCodeSend(struct soap *soap, _ns1__BarCodeSend const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BarCodeSend", p->soap_type() == SOAP_TYPE__ns1__BarCodeSend ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BarCodeSend(struct soap *soap, const char *URL, _ns1__BarCodeSend const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BarCodeSend", p->soap_type() == SOAP_TYPE__ns1__BarCodeSend ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__BarCodeSend(struct soap *soap, const char *URL, _ns1__BarCodeSend const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BarCodeSend", p->soap_type() == SOAP_TYPE__ns1__BarCodeSend ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BarCodeSend(struct soap *soap, const char *URL, _ns1__BarCodeSend const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BarCodeSend", p->soap_type() == SOAP_TYPE__ns1__BarCodeSend ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BarCodeSend * SOAP_FMAC4 soap_get__ns1__BarCodeSend(struct soap*, _ns1__BarCodeSend *, const char*, const char*);

inline int soap_read__ns1__BarCodeSend(struct soap *soap, _ns1__BarCodeSend *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__BarCodeSend(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BarCodeSend(struct soap *soap, const char *URL, _ns1__BarCodeSend *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__BarCodeSend(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__BarCodeSend(struct soap *soap, _ns1__BarCodeSend *p)
{
	if (::soap_read__ns1__BarCodeSend(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__BarCodeTable__DEFINED
#define SOAP_TYPE___ns1__BarCodeTable__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BarCodeTable_(struct soap*, struct __ns1__BarCodeTable_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BarCodeTable_(struct soap*, const struct __ns1__BarCodeTable_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BarCodeTable_(struct soap*, const char*, int, const struct __ns1__BarCodeTable_ *, const char*);
SOAP_FMAC3 struct __ns1__BarCodeTable_ * SOAP_FMAC4 soap_in___ns1__BarCodeTable_(struct soap*, const char*, struct __ns1__BarCodeTable_ *, const char*);
SOAP_FMAC1 struct __ns1__BarCodeTable_ * SOAP_FMAC2 soap_instantiate___ns1__BarCodeTable_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BarCodeTable_ * soap_new___ns1__BarCodeTable_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BarCodeTable_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BarCodeTable_ * soap_new_req___ns1__BarCodeTable_(
	struct soap *soap)
{
	struct __ns1__BarCodeTable_ *_p = ::soap_new___ns1__BarCodeTable_(soap);
	if (_p)
	{	::soap_default___ns1__BarCodeTable_(soap, _p);
	}
	return _p;
}

inline struct __ns1__BarCodeTable_ * soap_new_set___ns1__BarCodeTable_(
	struct soap *soap,
	_ns1__BarCodeTable *ns1__BarCodeTable)
{
	struct __ns1__BarCodeTable_ *_p = ::soap_new___ns1__BarCodeTable_(soap);
	if (_p)
	{	::soap_default___ns1__BarCodeTable_(soap, _p);
		_p->ns1__BarCodeTable = ns1__BarCodeTable;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BarCodeTable_(struct soap*, const struct __ns1__BarCodeTable_ *, const char*, const char*);

inline int soap_write___ns1__BarCodeTable_(struct soap *soap, struct __ns1__BarCodeTable_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__BarCodeTable_(soap, p), 0) || ::soap_put___ns1__BarCodeTable_(soap, p, "-ns1:BarCodeTable", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BarCodeTable_(struct soap *soap, const char *URL, struct __ns1__BarCodeTable_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__BarCodeTable_(soap, p), 0) || ::soap_put___ns1__BarCodeTable_(soap, p, "-ns1:BarCodeTable", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__BarCodeTable_(struct soap *soap, const char *URL, struct __ns1__BarCodeTable_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__BarCodeTable_(soap, p), 0) || ::soap_put___ns1__BarCodeTable_(soap, p, "-ns1:BarCodeTable", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BarCodeTable_(struct soap *soap, const char *URL, struct __ns1__BarCodeTable_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__BarCodeTable_(soap, p), 0) || ::soap_put___ns1__BarCodeTable_(soap, p, "-ns1:BarCodeTable", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BarCodeTable_ * SOAP_FMAC4 soap_get___ns1__BarCodeTable_(struct soap*, struct __ns1__BarCodeTable_ *, const char*, const char*);

inline int soap_read___ns1__BarCodeTable_(struct soap *soap, struct __ns1__BarCodeTable_ *p)
{
	if (p)
	{	::soap_default___ns1__BarCodeTable_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__BarCodeTable_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BarCodeTable_(struct soap *soap, const char *URL, struct __ns1__BarCodeTable_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__BarCodeTable_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__BarCodeTable_(struct soap *soap, struct __ns1__BarCodeTable_ *p)
{
	if (::soap_read___ns1__BarCodeTable_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__BarCodeSend__DEFINED
#define SOAP_TYPE___ns1__BarCodeSend__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BarCodeSend_(struct soap*, struct __ns1__BarCodeSend_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BarCodeSend_(struct soap*, const struct __ns1__BarCodeSend_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BarCodeSend_(struct soap*, const char*, int, const struct __ns1__BarCodeSend_ *, const char*);
SOAP_FMAC3 struct __ns1__BarCodeSend_ * SOAP_FMAC4 soap_in___ns1__BarCodeSend_(struct soap*, const char*, struct __ns1__BarCodeSend_ *, const char*);
SOAP_FMAC1 struct __ns1__BarCodeSend_ * SOAP_FMAC2 soap_instantiate___ns1__BarCodeSend_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BarCodeSend_ * soap_new___ns1__BarCodeSend_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BarCodeSend_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BarCodeSend_ * soap_new_req___ns1__BarCodeSend_(
	struct soap *soap)
{
	struct __ns1__BarCodeSend_ *_p = ::soap_new___ns1__BarCodeSend_(soap);
	if (_p)
	{	::soap_default___ns1__BarCodeSend_(soap, _p);
	}
	return _p;
}

inline struct __ns1__BarCodeSend_ * soap_new_set___ns1__BarCodeSend_(
	struct soap *soap,
	_ns1__BarCodeSend *ns1__BarCodeSend)
{
	struct __ns1__BarCodeSend_ *_p = ::soap_new___ns1__BarCodeSend_(soap);
	if (_p)
	{	::soap_default___ns1__BarCodeSend_(soap, _p);
		_p->ns1__BarCodeSend = ns1__BarCodeSend;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BarCodeSend_(struct soap*, const struct __ns1__BarCodeSend_ *, const char*, const char*);

inline int soap_write___ns1__BarCodeSend_(struct soap *soap, struct __ns1__BarCodeSend_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__BarCodeSend_(soap, p), 0) || ::soap_put___ns1__BarCodeSend_(soap, p, "-ns1:BarCodeSend", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BarCodeSend_(struct soap *soap, const char *URL, struct __ns1__BarCodeSend_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__BarCodeSend_(soap, p), 0) || ::soap_put___ns1__BarCodeSend_(soap, p, "-ns1:BarCodeSend", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__BarCodeSend_(struct soap *soap, const char *URL, struct __ns1__BarCodeSend_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__BarCodeSend_(soap, p), 0) || ::soap_put___ns1__BarCodeSend_(soap, p, "-ns1:BarCodeSend", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BarCodeSend_(struct soap *soap, const char *URL, struct __ns1__BarCodeSend_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__BarCodeSend_(soap, p), 0) || ::soap_put___ns1__BarCodeSend_(soap, p, "-ns1:BarCodeSend", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BarCodeSend_ * SOAP_FMAC4 soap_get___ns1__BarCodeSend_(struct soap*, struct __ns1__BarCodeSend_ *, const char*, const char*);

inline int soap_read___ns1__BarCodeSend_(struct soap *soap, struct __ns1__BarCodeSend_ *p)
{
	if (p)
	{	::soap_default___ns1__BarCodeSend_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__BarCodeSend_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BarCodeSend_(struct soap *soap, const char *URL, struct __ns1__BarCodeSend_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__BarCodeSend_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__BarCodeSend_(struct soap *soap, struct __ns1__BarCodeSend_ *p)
{
	if (::soap_read___ns1__BarCodeSend_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__BarCodeTable_DEFINED
#define SOAP_TYPE___ns1__BarCodeTable_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BarCodeTable(struct soap*, struct __ns1__BarCodeTable *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BarCodeTable(struct soap*, const struct __ns1__BarCodeTable *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BarCodeTable(struct soap*, const char*, int, const struct __ns1__BarCodeTable *, const char*);
SOAP_FMAC3 struct __ns1__BarCodeTable * SOAP_FMAC4 soap_in___ns1__BarCodeTable(struct soap*, const char*, struct __ns1__BarCodeTable *, const char*);
SOAP_FMAC1 struct __ns1__BarCodeTable * SOAP_FMAC2 soap_instantiate___ns1__BarCodeTable(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BarCodeTable * soap_new___ns1__BarCodeTable(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BarCodeTable(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BarCodeTable * soap_new_req___ns1__BarCodeTable(
	struct soap *soap)
{
	struct __ns1__BarCodeTable *_p = ::soap_new___ns1__BarCodeTable(soap);
	if (_p)
	{	::soap_default___ns1__BarCodeTable(soap, _p);
	}
	return _p;
}

inline struct __ns1__BarCodeTable * soap_new_set___ns1__BarCodeTable(
	struct soap *soap,
	_ns1__BarCodeTable *ns1__BarCodeTable)
{
	struct __ns1__BarCodeTable *_p = ::soap_new___ns1__BarCodeTable(soap);
	if (_p)
	{	::soap_default___ns1__BarCodeTable(soap, _p);
		_p->ns1__BarCodeTable = ns1__BarCodeTable;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BarCodeTable(struct soap*, const struct __ns1__BarCodeTable *, const char*, const char*);

inline int soap_write___ns1__BarCodeTable(struct soap *soap, struct __ns1__BarCodeTable const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__BarCodeTable(soap, p), 0) || ::soap_put___ns1__BarCodeTable(soap, p, "-ns1:BarCodeTable", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BarCodeTable(struct soap *soap, const char *URL, struct __ns1__BarCodeTable const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__BarCodeTable(soap, p), 0) || ::soap_put___ns1__BarCodeTable(soap, p, "-ns1:BarCodeTable", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__BarCodeTable(struct soap *soap, const char *URL, struct __ns1__BarCodeTable const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__BarCodeTable(soap, p), 0) || ::soap_put___ns1__BarCodeTable(soap, p, "-ns1:BarCodeTable", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BarCodeTable(struct soap *soap, const char *URL, struct __ns1__BarCodeTable const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__BarCodeTable(soap, p), 0) || ::soap_put___ns1__BarCodeTable(soap, p, "-ns1:BarCodeTable", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BarCodeTable * SOAP_FMAC4 soap_get___ns1__BarCodeTable(struct soap*, struct __ns1__BarCodeTable *, const char*, const char*);

inline int soap_read___ns1__BarCodeTable(struct soap *soap, struct __ns1__BarCodeTable *p)
{
	if (p)
	{	::soap_default___ns1__BarCodeTable(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__BarCodeTable(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BarCodeTable(struct soap *soap, const char *URL, struct __ns1__BarCodeTable *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__BarCodeTable(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__BarCodeTable(struct soap *soap, struct __ns1__BarCodeTable *p)
{
	if (::soap_read___ns1__BarCodeTable(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__BarCodeSend_DEFINED
#define SOAP_TYPE___ns1__BarCodeSend_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BarCodeSend(struct soap*, struct __ns1__BarCodeSend *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BarCodeSend(struct soap*, const struct __ns1__BarCodeSend *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BarCodeSend(struct soap*, const char*, int, const struct __ns1__BarCodeSend *, const char*);
SOAP_FMAC3 struct __ns1__BarCodeSend * SOAP_FMAC4 soap_in___ns1__BarCodeSend(struct soap*, const char*, struct __ns1__BarCodeSend *, const char*);
SOAP_FMAC1 struct __ns1__BarCodeSend * SOAP_FMAC2 soap_instantiate___ns1__BarCodeSend(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BarCodeSend * soap_new___ns1__BarCodeSend(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BarCodeSend(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BarCodeSend * soap_new_req___ns1__BarCodeSend(
	struct soap *soap)
{
	struct __ns1__BarCodeSend *_p = ::soap_new___ns1__BarCodeSend(soap);
	if (_p)
	{	::soap_default___ns1__BarCodeSend(soap, _p);
	}
	return _p;
}

inline struct __ns1__BarCodeSend * soap_new_set___ns1__BarCodeSend(
	struct soap *soap,
	_ns1__BarCodeSend *ns1__BarCodeSend)
{
	struct __ns1__BarCodeSend *_p = ::soap_new___ns1__BarCodeSend(soap);
	if (_p)
	{	::soap_default___ns1__BarCodeSend(soap, _p);
		_p->ns1__BarCodeSend = ns1__BarCodeSend;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BarCodeSend(struct soap*, const struct __ns1__BarCodeSend *, const char*, const char*);

inline int soap_write___ns1__BarCodeSend(struct soap *soap, struct __ns1__BarCodeSend const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__BarCodeSend(soap, p), 0) || ::soap_put___ns1__BarCodeSend(soap, p, "-ns1:BarCodeSend", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BarCodeSend(struct soap *soap, const char *URL, struct __ns1__BarCodeSend const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__BarCodeSend(soap, p), 0) || ::soap_put___ns1__BarCodeSend(soap, p, "-ns1:BarCodeSend", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__BarCodeSend(struct soap *soap, const char *URL, struct __ns1__BarCodeSend const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__BarCodeSend(soap, p), 0) || ::soap_put___ns1__BarCodeSend(soap, p, "-ns1:BarCodeSend", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BarCodeSend(struct soap *soap, const char *URL, struct __ns1__BarCodeSend const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__BarCodeSend(soap, p), 0) || ::soap_put___ns1__BarCodeSend(soap, p, "-ns1:BarCodeSend", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BarCodeSend * SOAP_FMAC4 soap_get___ns1__BarCodeSend(struct soap*, struct __ns1__BarCodeSend *, const char*, const char*);

inline int soap_read___ns1__BarCodeSend(struct soap *soap, struct __ns1__BarCodeSend *p)
{
	if (p)
	{	::soap_default___ns1__BarCodeSend(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__BarCodeSend(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BarCodeSend(struct soap *soap, const char *URL, struct __ns1__BarCodeSend *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__BarCodeSend(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__BarCodeSend(struct soap *soap, struct __ns1__BarCodeSend *p)
{
	if (::soap_read___ns1__BarCodeSend(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_ns1__BarCodeTable_DEFINED
#define SOAP_TYPE_PointerTo_ns1__BarCodeTable_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BarCodeTable(struct soap*, _ns1__BarCodeTable *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BarCodeTable(struct soap*, const char *, int, _ns1__BarCodeTable *const*, const char *);
SOAP_FMAC3 _ns1__BarCodeTable ** SOAP_FMAC4 soap_in_PointerTo_ns1__BarCodeTable(struct soap*, const char*, _ns1__BarCodeTable **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BarCodeTable(struct soap*, _ns1__BarCodeTable *const*, const char*, const char*);
SOAP_FMAC3 _ns1__BarCodeTable ** SOAP_FMAC4 soap_get_PointerTo_ns1__BarCodeTable(struct soap*, _ns1__BarCodeTable **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__BarCodeSend_DEFINED
#define SOAP_TYPE_PointerTo_ns1__BarCodeSend_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BarCodeSend(struct soap*, _ns1__BarCodeSend *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BarCodeSend(struct soap*, const char *, int, _ns1__BarCodeSend *const*, const char *);
SOAP_FMAC3 _ns1__BarCodeSend ** SOAP_FMAC4 soap_in_PointerTo_ns1__BarCodeSend(struct soap*, const char*, _ns1__BarCodeSend **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BarCodeSend(struct soap*, _ns1__BarCodeSend *const*, const char*, const char*);
SOAP_FMAC3 _ns1__BarCodeSend ** SOAP_FMAC4 soap_get_PointerTo_ns1__BarCodeSend(struct soap*, _ns1__BarCodeSend **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__BarCodeTableResponse_BarCodeTableResult_DEFINED
#define SOAP_TYPE_PointerTo_ns1__BarCodeTableResponse_BarCodeTableResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BarCodeTableResponse_BarCodeTableResult(struct soap*, _ns1__BarCodeTableResponse_BarCodeTableResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BarCodeTableResponse_BarCodeTableResult(struct soap*, const char *, int, _ns1__BarCodeTableResponse_BarCodeTableResult *const*, const char *);
SOAP_FMAC3 _ns1__BarCodeTableResponse_BarCodeTableResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__BarCodeTableResponse_BarCodeTableResult(struct soap*, const char*, _ns1__BarCodeTableResponse_BarCodeTableResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BarCodeTableResponse_BarCodeTableResult(struct soap*, _ns1__BarCodeTableResponse_BarCodeTableResult *const*, const char*, const char*);
SOAP_FMAC3 _ns1__BarCodeTableResponse_BarCodeTableResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__BarCodeTableResponse_BarCodeTableResult(struct soap*, _ns1__BarCodeTableResponse_BarCodeTableResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_XML_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_XML_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap*, std::vector<char *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap*, const std::vector<char *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap*, const char*, int, const std::vector<char *> *, const char*);
SOAP_FMAC3 std::vector<char *> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap*, const char*, std::vector<char *> *, const char*);
SOAP_FMAC1 std::vector<char *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_XML(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<char *>  * soap_new_std__vectorTemplateOf_XML(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_XML(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
